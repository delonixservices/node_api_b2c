version: '3.8'

services:
  # Frontend Application (Next.js)
  frontend:
    build:
      context: ./next
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=https://api.tripbazaar.in
      - NEXT_PUBLIC_APP_NAME=TripBazaar
      - NEXT_PUBLIC_SITE_URL=https://tripbazaar.in
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - b2c-network
    volumes:
      - ./next/public:/app/public
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend Application (Node.js)
  backend:
    build:
      context: ./node
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    ports:
      - "3334:3334"
    environment:
      - NODE_ENV=production
      - PORT=3334
      - HOST=0.0.0.0
      - DB_CONNECTION_STRING=mongodb://mongo:27017/b2capi
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - HOTEL_APIURL=${HOTEL_APIURL}
      - HOTEL_APIAUTH=${HOTEL_APIAUTH}
      - FLIGHT_APIURL=${FLIGHT_APIURL}
      - SMS_AUTH_KEY=${SMS_AUTH_KEY}
      - MERCHANT_ID=${MERCHANT_ID}
      - ACCESS_CODE=${ACCESS_CODE}
      - WORKING_KEY=${WORKING_KEY}
      - PAYMENT_URL=${PAYMENT_URL}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - CLIENT_HOST=tripbazaar.in
      - CLIENT_PORT=443
      - PROTOCOL=https
      - APP_HOST=api.tripbazaar.in
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - b2c-network
    volumes:
      - ./node/logs:/app/logs
      - ./node/public/uploads:/app/public/uploads
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3334/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database
  mongo:
    image: mongo:6.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=b2capi
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db
      - ./node/mongo-init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - b2c-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - b2c-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./node/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./node/nginx/ssl:/etc/nginx/ssl
      - ./node/logs/nginx:/var/log/nginx
      - ./next/out:/var/www/html
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - b2c-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - b2c-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - b2c-network

  # Log Management - ELK Stack (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - b2c-network
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - b2c-network
    restart: unless-stopped

  # Backup Service
  backup:
    image: mongo:6.0
    volumes:
      - ./backups:/backups
      - mongo_data:/data/db
    command: >
      sh -c "
        while true; do
          sleep 86400;
          mongodump --host mongo --port 27017 --out /backups/$$(date +%Y%m%d_%H%M%S);
        done
      "
    depends_on:
      - mongo
    networks:
      - b2c-network
    restart: unless-stopped

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  b2c-network:
    driver: bridge 